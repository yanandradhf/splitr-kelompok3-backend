generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Mobile Authentication
model UserAuth {
  authId            String   @id @default(uuid()) @map("auth_id")
  userId            String   @unique @map("user_id")
  username          String   @unique @db.VarChar(50)
  passwordHash      String   @map("password_hash")
  refreshToken      String?  @map("refresh_token") @db.Text
  refreshTokenExp   DateTime? @map("refresh_token_exp")
  lastLoginAt       DateTime? @map("last_login_at")
  loginAttempts     Int      @default(0) @map("login_attempts")
  lockedUntil       DateTime? @map("locked_until")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  otpCodes          OtpCode[]
  
  @@map("user_auth")
}

// OTP Management for registration & password recovery
model OtpCode {
  otpId        String   @id @default(uuid()) @map("otp_id")
  authId       String?  @map("auth_id")
  email        String   @map("email")
  otpCode      String   @map("otp_code") @db.VarChar(6)
  purpose      String   @map("purpose") @db.VarChar(20) // registration, password_reset
  isUsed       Boolean  @default(false) @map("is_used")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  auth         UserAuth? @relation(fields: [authId], references: [authId], onDelete: Cascade)
  
  @@index([email, otpCode])
  @@map("otp_codes")
}



// BNI Dummy Accounts (with balance for payment simulation)
model BniDummyAccount {
  accountId         String   @id @default(uuid()) @map("account_id")
  namaRekening      String   @map("nama_rekening") @db.VarChar(100)
  nomorRekening     String   @unique @map("nomor_rekening") @db.VarChar(20)
  branchCode        String   @map("branch_code") @db.VarChar(10)
  saldo             Decimal  @default(0) @map("saldo") @db.Decimal(15, 2) // for payment simulation
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  
  @@map("bni_dummy_accounts")
}





// Activity Log
model ActivityLog {
  activityId        String   @id @default(uuid()) @map("activity_id")
  userId            String   @map("user_id")
  billId            String?  @map("bill_id")
  activityType      String   @map("activity_type") @db.VarChar(50)
  title             String   @db.VarChar(200)
  description       String?
  metadata          Json?    @map("metadata")
  isRead            Boolean  @default(false) @map("is_read")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  bill              Bill?    @relation(fields: [billId], references: [billId], onDelete: SetNull)
  
  @@index([userId, createdAt])
  @@map("activity_logs")
}
// Users model (Mobile Ready) - matches userflow requirements
model User {
  userId               String   @id @default(uuid()) @map("user_id")
  name                 String   @db.VarChar(100) // nama_pemilik from BNI validation
  email                String   @unique @db.VarChar(150)
  phone                String   @unique @db.VarChar(20) // nomor_hp from registration
  bniAccountNumber     String   @unique @map("bni_account_number") @db.VarChar(20) // nomor_rekening
  bniBranchCode        String   @map("bni_branch_code") @db.VarChar(10)
  encryptedPinHash     String   @map("encrypted_pin_hash") // 6-digit PIN from step 5
  isVerified           Boolean  @default(false) @map("is_verified")
  defaultPaymentMethod String   @default("instant") @map("default_payment_method") @db.VarChar(20)
  autoDebitEnabled     Boolean  @default(false) @map("auto_debit_enabled")
  fcmToken             String?  @map("fcm_token")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // profilePicture       String   @db.VarChar(100)
  // emailNotifEnabled    Boolean  @default(false) @map("_debit_enabled")
  // twoFactorAuthEnabled Boolean  @default(false) @map("auto_debit_enabled")

  // Relations (same as before)
  createdGroups     Group[]             @relation("GroupCreator")
  groupMemberships  GroupMember[]
  hostedBills       Bill[]              @relation("BillHost")
  payments          Payment[]
  notifications     Notification[]
  auth              UserAuth?
  activities        ActivityLog[]
  friends           Friend[]            @relation("UserFriends")
  friendOf          Friend[]            @relation("FriendOf")
  billParticipants  BillParticipant[]
  createdInvites    BillInvite[]
  joinLogs          BillJoinLog[]
  
  @@map("users")
}
// Groups model
model Group {
  groupId     String   @id @default(uuid()) @map("group_id")
  creatorId   String   @map("creator_id")
  groupName   String   @map("group_name") @db.VarChar(100)
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator User          @relation("GroupCreator", fields: [creatorId], references: [userId], onDelete: Cascade)
  members GroupMember[]
  bills   Bill[]
  notifications Notification[]

  @@map("groups")
}

// Group Members model
model GroupMember {
  memberId  String   @id @default(uuid()) @map("member_id")
  groupId   String   @map("group_id")
  userId    String   @map("user_id")
  isCreator Boolean  @default(false) @map("is_creator")
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  group Group @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

// Bill Categories model
model BillCategory {
  categoryId   String   @id @default(uuid()) @map("category_id")
  categoryName String   @unique @map("category_name") @db.VarChar(50)
  categoryIcon String?  @map("category_icon") @db.VarChar(20) // üçΩÔ∏è, ü•§, üé¨, üöó, üì¶
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  bills Bill[]

  @@map("bill_categories")
}

// Bills model (simple - OCR optional)
model Bill {
  billId                String    @id @default(uuid()) @map("bill_id")
  hostId                String    @map("host_id")
  groupId               String?   @map("group_id")
  categoryId            String?   @map("category_id")
  billName              String    @map("bill_name") @db.VarChar(200)
  billCode              String?   @unique @map("bill_code") @db.VarChar(8)
  receiptImageUrl       String?   @map("receipt_image_url") // optional OCR
  totalAmount           Decimal   @default(0) @map("total_amount") @db.Decimal(12, 2)
  maxPaymentDate        DateTime? @map("max_payment_date")
  allowScheduledPayment Boolean   @default(true) @map("allow_scheduled_payment")
  status                String    @default("active") @db.VarChar(20) // active, completed, cancelled
  splitMethod           String    @default("equal") @map("split_method") @db.VarChar(20)
  currency              String    @default("IDR") @db.VarChar(3)
  
  // Fee support - percentages and calculated amounts
  taxPct                Decimal?  @default(0) @map("tax_pct") @db.Decimal(5, 2)
  servicePct            Decimal?  @default(0) @map("service_pct") @db.Decimal(5, 2)
  discountPct           Decimal?  @default(0) @map("discount_pct") @db.Decimal(5, 2)
  discountNominal       Decimal?  @default(0) @map("discount_nominal") @db.Decimal(10, 2)
  
  // Calculated fee amounts (for participant clarity)
  subTotal              Decimal?  @default(0) @map("sub_total") @db.Decimal(12, 2)
  taxAmount             Decimal?  @default(0) @map("tax_amount") @db.Decimal(10, 2)
  serviceAmount         Decimal?  @default(0) @map("service_amount") @db.Decimal(10, 2)
  discountAmount        Decimal?  @default(0) @map("discount_amount") @db.Decimal(10, 2)
  
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  host              User               @relation("BillHost", fields: [hostId], references: [userId], onDelete: Cascade)
  group             Group?             @relation(fields: [groupId], references: [groupId], onDelete: SetNull)
  category          BillCategory?      @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)
  billItems         BillItem[]
  payments          Payment[]
  notifications     Notification[]
  activities        ActivityLog[]
  billParticipants  BillParticipant[]
  itemAssignments   ItemAssignment[]
  billInvites       BillInvite[]
  @@map("bills")
}



// Bill Items model
model BillItem {
  itemId        String   @id @default(uuid()) @map("item_id")
  billId        String   @map("bill_id")
  itemName      String   @map("item_name") @db.VarChar(200)
  price         Decimal  @db.Decimal(10, 2)
  quantity      Int      @default(1)
  category      String?  @db.VarChar(50) // food_item, beverage_item, service, tax
  
  // Sharing support
  isSharing     Boolean  @default(false) @map("is_sharing")
  
  ocrConfidence Decimal? @map("ocr_confidence") @db.Decimal(3, 2) // 0.00 - 1.00
  isVerified    Boolean  @default(false) @map("is_verified") // user verified OCR result
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  bill           Bill            @relation(fields: [billId], references: [billId], onDelete: Cascade)
  itemAssignments ItemAssignment[]
  @@map("bill_items")
}



// Payments model
model Payment {
  paymentId          String    @id @default(uuid()) @map("payment_id")
  billId             String    @map("bill_id")
  userId             String    @map("user_id")
  amount             Decimal   @db.Decimal(10, 2)
  paymentMethod      String    @default("BNI_TRANSFER") @map("payment_method") @db.VarChar(50)
  paymentType        String    @default("instant") @map("payment_type") @db.VarChar(20) // instant, scheduled
  status             String    @default("pending") @db.VarChar(30) // pending, completed, completed_scheduled, failed
  scheduledDate      DateTime? @map("scheduled_date") // Tambah field untuk scheduled payment
  transactionId      String?   @unique @map("transaction_id") @db.VarChar(100)
  bniReferenceNumber String?   @map("bni_reference_number") @db.VarChar(50)
  fromBranch         String?   @map("from_branch") @db.VarChar(10) // untuk geotagging
  toBranch           String?   @map("to_branch") @db.VarChar(10)   // untuk geotagging
  paidAt             DateTime? @map("paid_at")
  createdAt          DateTime  @default(now()) @map("created_at")

  // Relations
  bill Bill @relation(fields: [billId], references: [billId], onDelete: Cascade)
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("payments")
}





// Notifications model (simple untuk mobile)
model Notification {
  notificationId String    @id @default(uuid()) @map("notification_id")
  userId         String    @map("user_id")
  billId         String?   @map("bill_id")
  groupId        String?   @map("group_id")
  type           String    @db.VarChar(50) // payment_reminder, payment_success, payment_failed, bill_complete, follow_up, group_invitation, group_member_joined, group_member_left, group_updated, group_deleted
  title          String    @db.VarChar(200)
  message        String
  metadata       Json?     @map("metadata") // for action buttons and extra data
  isRead         Boolean   @default(false) @map("is_read")
  sentAt         DateTime? @map("sent_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  // Relations
  user User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  bill Bill? @relation(fields: [billId], references: [billId], onDelete: SetNull)
  group Group? @relation(fields: [groupId], references: [groupId], onDelete: SetNull)

  @@map("notifications")
}

// Registration Session (temporary storage during 5-step registration)
model RegistrationSession {
  sessionId        String   @id @default(uuid()) @map("session_id")
  nomorRekening    String   @map("nomor_rekening") @db.VarChar(20)
  namaRekening     String   @map("nama_rekening") @db.VarChar(100)
  noHp             String   @map("no_hp") @db.VarChar(20)
  email            String   @map("email") @db.VarChar(150)
  username         String?  @map("username") @db.VarChar(50)
  passwordHash     String?  @map("password_hash")
  currentStep      Int      @default(1) @map("current_step") // 1-5
  isCompleted      Boolean  @default(false) @map("is_completed")
  expiresAt        DateTime @map("expires_at")
  createdAt        DateTime @default(now()) @map("created_at")
  
  @@map("registration_sessions")
}

// BNI Branches model (untuk geotagging analytics)
model BniBranch {
  branchId   String   @id @default(uuid()) @map("branch_id")
  branchCode String   @unique @map("branch_code") @db.VarChar(10)
  branchName String   @map("branch_name") @db.VarChar(100)
  city       String   @db.VarChar(50)
  province   String   @db.VarChar(50)
  latitude   Decimal? @db.Decimal(10, 8)
  longitude  Decimal? @db.Decimal(11, 8)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("bni_branches")
}

// Admin Users model (untuk admin dashboard)
model AdminUser {
  adminId      String    @id @default(uuid()) @map("admin_id")
  username     String    @unique @db.VarChar(50)
  passwordHash String    @map("password_hash")
  email        String    @unique @db.VarChar(150)
  role         String    @default("admin") @db.VarChar(20) // admin, super_admin, viewer
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("admin_users")
}

// Friends model (untuk friend system)
model Friend {
  friendshipId   String   @id @default(uuid()) @map("friendship_id")
  userId         String   @map("user_id")
  friendUserId   String   @map("friend_user_id")
  status         String   @default("active") @db.VarChar(20) // active, blocked, pending
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user           User     @relation("UserFriends", fields: [userId], references: [userId], onDelete: Cascade)
  friend         User     @relation("FriendOf", fields: [friendUserId], references: [userId], onDelete: Cascade)

  @@unique([userId, friendUserId])
  @@map("friends")
}

// Bill Participants model (supports both users and temp participants)
model BillParticipant {
  participantId   String    @id @default(uuid()) @map("participant_id")
  billId          String    @map("bill_id")
  userId          String?   @map("user_id") // nullable for temp participants
  tempName        String?   @map("temp_name") // for non-users (name only)
  amountShare     Decimal   @map("amount_share") @db.Decimal(10, 2)
  
  // Breakdown per participant (from frontend calculation)
  subtotal        Decimal?  @map("subtotal") @db.Decimal(10, 2)
  taxAmount       Decimal?  @map("tax_amount") @db.Decimal(10, 2)
  serviceAmount   Decimal?  @map("service_amount") @db.Decimal(10, 2)
  discountAmount  Decimal?  @map("discount_amount") @db.Decimal(10, 2)
  
  paymentStatus   String    @default("pending") @map("payment_status") @db.VarChar(20) // pending, paid, failed
  paidAt          DateTime? @map("paid_at")
  joinedAt        DateTime  @default(now()) @map("joined_at")

  // Relations
  bill            Bill      @relation(fields: [billId], references: [billId], onDelete: Cascade)
  user            User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  itemAssignments ItemAssignment[]

  @@unique([billId, userId])
  @@map("bill_participants")
}

// Item Assignment (host assigns items to participants)
model ItemAssignment {
  assignmentId    String    @id @default(uuid()) @map("assignment_id")
  billId          String    @map("bill_id")
  itemId          String    @map("item_id")
  participantId   String    @map("participant_id")
  quantityAssigned Int      @map("quantity_assigned")
  amountAssigned  Decimal   @map("amount_assigned") @db.Decimal(10, 2)
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  bill            Bill            @relation(fields: [billId], references: [billId], onDelete: Cascade)
  item            BillItem        @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  participant     BillParticipant @relation(fields: [participantId], references: [participantId], onDelete: Cascade)

  @@unique([itemId, participantId])
  @@map("item_assignments")
}

// Bill Invite/Join System (untuk share link/QR)
model BillInvite {
  inviteId     String    @id @default(uuid()) @map("invite_id")
  billId       String    @map("bill_id")
  joinCode     String    @unique @map("join_code") @db.VarChar(8) // LUNCH01
  inviteLink   String    @unique @map("invite_link") // generated URL
  qrCodeUrl    String?   @map("qr_code_url") // QR image URL
  createdBy    String    @map("created_by")
  maxUses      Int       @default(50) @map("max_uses")
  currentUses  Int       @default(0) @map("current_uses")
  expiresAt    DateTime? @map("expires_at")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  bill         Bill      @relation(fields: [billId], references: [billId], onDelete: Cascade)
  creator      User      @relation(fields: [createdBy], references: [userId], onDelete: Cascade)
  joinLogs     BillJoinLog[]

  @@map("bill_invites")
}

// Track who joined via invite link
model BillJoinLog {
  joinId       String    @id @default(uuid()) @map("join_id")
  inviteId     String    @map("invite_id")
  userId       String?   @map("user_id") // null if user registered during join
  joinedAt     DateTime  @default(now()) @map("joined_at")
  joinMethod   String    @map("join_method") @db.VarChar(20) // link, qr, direct
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent")

  // Relations
  invite       BillInvite @relation(fields: [inviteId], references: [inviteId], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [userId], onDelete: SetNull)

  @@map("bill_join_logs")
}